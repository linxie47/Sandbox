From 35aa74f9abf9081936fe9d55db4bcf0d9cd9e618 Mon Sep 17 00:00:00 2001
From: Lin Xie <lin.xie@intel.com>
Date: Mon, 10 Jun 2019 14:31:07 +0800
Subject: [PATCH] More changes within one patch

* Fix some definite memory leak
* Change the third party library cJSON to json-c
* Add max result count setting for detection
* Assign default value to classify metadata name
* Fix model proc and model mismatch crash
---
 configure                           |  13 ++--
 libavfilter/inference.c             | 135 ++++++++++++++++++------------------
 libavfilter/inference.h             |   2 +-
 libavfilter/vf_inference_classify.c |  12 +++-
 libavfilter/vf_inference_detect.c   |  12 +++-
 libavfilter/vf_inference_identify.c | 104 ++++++++++++++-------------
 6 files changed, 153 insertions(+), 125 deletions(-)

diff --git a/configure b/configure
index dcaaf95..f7feedb 100755
--- a/configure
+++ b/configure
@@ -241,6 +241,7 @@ External library support:
   --enable-libinference_engine enable intel inference engine as a DNN module
                                backend [no]
   --enable-libjack         enable JACK audio sound server [no]
+  --enable-libjson_c       enable libjson-c [no]
   --enable-libklvanc       enable Kernel Labs VANC processing [no]
   --enable-libkvazaar      enable HEVC encoding via libkvazaar [no]
   --enable-liblensfun      enable lensfun lens correction [no]
@@ -1648,7 +1649,6 @@ EXTERNAL_AUTODETECT_LIBRARY_LIST="
     bzlib
     coreimage
     iconv
-    libcjson
     libxcb
     libxcb_shm
     libxcb_shape
@@ -1728,6 +1728,7 @@ EXTERNAL_LIBRARY_LIST="
     libilbc
     libinference_engine
     libjack
+    libjson_c
     libklvanc
     libkvazaar
     libmodplug
@@ -3412,13 +3413,13 @@ fspp_filter_deps="gpl"
 geq_filter_deps="gpl"
 histeq_filter_deps="gpl"
 hqdn3d_filter_deps="gpl"
-inference_classify_filter_deps="libinference_engine libcjson"
+inference_classify_filter_deps="libinference_engine libjson_c"
 inference_classify_filter_select="dnn"
-inference_detect_filter_deps="libinference_engine libcjson"
+inference_detect_filter_deps="libinference_engine libjson_c"
 inference_detect_filter_select="dnn"
-inference_identify_filter_deps="libinference_engine libcjson"
+inference_identify_filter_deps="libinference_engine libjson_c"
 inference_identify_filter_select="dnn"
-inference_metaconvert_filter_deps="libinference_engine libcjson"
+inference_metaconvert_filter_deps="libinference_engine libjson_c"
 interlace_filter_deps="gpl"
 kerndeint_filter_deps="gpl"
 ladspa_filter_deps="ladspa libdl"
@@ -6259,7 +6260,7 @@ enabled libinference_engine &&
 
 enabled librdkafka  && require_pkg_config librdkafka rdkafka "librdkafka/rdkafka.h" rd_kafka_version
 
-enabled libcjson && check_pkg_config libcjson "libcjson >= 1.7.10" cjson/cJSON.h cJSON_Version || disable libcjson
+enabled libjson_c && check_pkg_config libjson_c json-c json-c/json.h json_c_version
 
 if enabled gcrypt; then
     GCRYPT_CONFIG="${cross_prefix}libgcrypt-config"
diff --git a/libavfilter/inference.c b/libavfilter/inference.c
index 36ad6ea..97ce8fb 100644
--- a/libavfilter/inference.c
+++ b/libavfilter/inference.c
@@ -33,8 +33,8 @@
 
 #include "inference.h"
 
-#if CONFIG_LIBCJSON
-#include <cjson/cJSON.h>
+#if CONFIG_LIBJSON_C
+#include <json-c/json.h>
 #endif
 
 #if CONFIG_VAAPI
@@ -80,6 +80,8 @@ static void infer_labels_buffer_free(void *opaque, uint8_t *data)
     for (i = 0; i < labels->num; i++)
         av_freep(&labels->label[i]);
 
+    av_free(labels->label);
+
     av_free(data);
 }
 
@@ -828,22 +830,17 @@ static int va_vpp_crop_and_scale(VAAPIVpp *va_vpp,
 }
 #endif
 
-#if CONFIG_LIBCJSON
+#if CONFIG_LIBJSON_C
 /*
- * model proc parsing functions using cJSON
+ * model proc parsing functions using JSON-c
  */
-static inline void json_print(cJSON *j)
-{
-    char *string = cJSON_Print(j);
-    if (string)
-        printf("%s\n", string);
-}
-
 void *ff_read_model_proc(const char *path)
 {
     int n, file_size;
-    cJSON *proc_config = NULL;
+    json_object *proc_config = NULL;
     uint8_t *proc_json = NULL;
+    json_tokener *tok = NULL;
+
     FILE *fp = fopen(path, "rb");
     if (!fp) {
         fprintf(stderr, "File open error:%s\n", path);
@@ -860,17 +857,20 @@ void *ff_read_model_proc(const char *path)
 
     UNUSED(n);
 
-    proc_config = cJSON_Parse(proc_json);
+    tok = json_tokener_new();
+    proc_config = json_tokener_parse_ex(tok, proc_json, file_size);
     if (proc_config == NULL) {
-        const char *error_ptr = cJSON_GetErrorPtr();
-        if (error_ptr != NULL)
-            fprintf(stderr, "Error before: %s\n", error_ptr);
+        enum json_tokener_error jerr;
+        jerr = json_tokener_get_error(tok);
+        fprintf(stderr, "Error before: %s\n", json_tokener_error_desc(jerr));
         goto end;
     }
 
 end:
     if (proc_json)
         av_freep(&proc_json);
+    if(tok)
+        json_tokener_free(tok);
     fclose(fp);
     return proc_config;
 }
@@ -895,48 +895,46 @@ void ff_load_default_model_proc(ModelInputPreproc *preproc, ModelOutputPostproc
 
 int ff_parse_input_preproc(const void *json, ModelInputPreproc *m_preproc)
 {
-    cJSON *item, *preproc;
-    cJSON *color = NULL, *layer = NULL, *object_class = NULL;
+    json_object *jvalue, *preproc, *color, *layer, *object_class;
+    int ret;
 
-    preproc = cJSON_GetObjectItem(json, "input_preproc");
-    if (preproc == NULL) {
+    ret = json_object_object_get_ex((json_object *)json, "input_preproc", &preproc);
+    if (!ret) {
         av_log(NULL, AV_LOG_DEBUG, "No input_preproc.\n");
         return 0;
     }
 
     // not support multiple inputs yet
-    av_assert0(cJSON_GetArraySize(preproc) <= 1);
+    av_assert0(json_object_array_length(preproc) <= 1);
 
-    cJSON_ArrayForEach(item, preproc)
-    {
-        color = cJSON_GetObjectItemCaseSensitive(item, "color_format");
-        layer = cJSON_GetObjectItemCaseSensitive(item, "layer_name");
-        object_class = cJSON_GetObjectItemCaseSensitive(item, "object_class");
-    }
+    jvalue = json_object_array_get_idx(preproc, 0);
 
-    if (color) {
-        if (!cJSON_IsString(color) || (color->valuestring == NULL))
+    ret = json_object_object_get_ex(jvalue, "color_format", &color);
+    if (ret) {
+        if (json_object_get_string(color) == NULL)
             return -1;
 
-        av_log(NULL, AV_LOG_INFO, "Color Format:\"%s\"\n", color->valuestring);
+        av_log(NULL, AV_LOG_INFO, "Color Format:\"%s\"\n", json_object_get_string(color));
 
-        if (!strcmp(color->valuestring, "BGR"))
+        if (!strcmp(json_object_get_string(color), "BGR"))
             m_preproc->color_format = AV_PIX_FMT_BGR24;
-        else if (!strcmp(color->valuestring, "RGB"))
+        else if (!strcmp(json_object_get_string(color), "RGB"))
             m_preproc->color_format = AV_PIX_FMT_RGB24;
         else
             return -1;
     }
 
-    if (object_class) {
-        if (!cJSON_IsString(object_class) || (object_class->valuestring == NULL))
+    ret = json_object_object_get_ex(jvalue, "object_class", &object_class);
+    if (ret) {
+        if (json_object_get_string(object_class) == NULL)
             return -1;
 
-        av_log(NULL, AV_LOG_INFO, "Object_class:\"%s\"\n", object_class->valuestring);
+        av_log(NULL, AV_LOG_INFO, "Object_class:\"%s\"\n", json_object_get_string(object_class));
 
-        m_preproc->object_class = object_class->valuestring;
+        m_preproc->object_class = (char *)json_object_get_string(object_class);
     }
 
+    ret = json_object_object_get_ex(jvalue, "layer_name", &layer);
     UNUSED(layer);
 
     return 0;
@@ -946,33 +944,36 @@ int ff_parse_input_preproc(const void *json, ModelInputPreproc *m_preproc)
 // Layer name and type can be got from output blob.
 int ff_parse_output_postproc(const void *json, ModelOutputPostproc *m_postproc)
 {
-    size_t index = 0;
-    cJSON *item, *postproc;
-    cJSON *attribute, *converter, *labels, *layer, *method, *threshold;
-    cJSON *tensor2text_scale, *tensor2text_precision;
-
-    postproc = cJSON_GetObjectItem(json, "output_postproc");
-    if (postproc == NULL) {
+    json_object *jvalue, *postproc;
+    json_object *attribute, *converter, *labels, *layer, *method, *threshold;
+    json_object *tensor2text_scale, *tensor2text_precision;
+    int ret;
+    size_t jarraylen;
+
+    ret = json_object_object_get_ex((json_object *)json, "output_postproc", &postproc);
+    if (!ret) {
         av_log(NULL, AV_LOG_DEBUG, "No output_postproc.\n");
         return 0;
     }
 
-    av_assert0(cJSON_GetArraySize(postproc) <= MAX_MODEL_OUTPUT);
-    cJSON_ArrayForEach(item, postproc)
-    {
-        OutputPostproc *proc = &m_postproc->procs[index];
+    jarraylen = json_object_array_length(postproc);
+    av_assert0(jarraylen <= MAX_MODEL_OUTPUT);
+
+    for(int i = 0; i < jarraylen; i++){
+        jvalue = json_object_array_get_idx(postproc, i);
+        OutputPostproc *proc = &m_postproc->procs[i];
 
-#define FETCH_STRING(var, name)                                  \
-        do { var = cJSON_GetObjectItemCaseSensitive(item, #name);\
-            if (var) proc->name = var->valuestring;              \
+#define FETCH_STRING(var, name)                                           \
+        do { ret = json_object_object_get_ex(jvalue, #name, &var);        \
+            if (ret) proc->name = (char *)json_object_get_string(var);    \
         } while(0)
-#define FETCH_DOUBLE(var, name)                                  \
-        do { var = cJSON_GetObjectItemCaseSensitive(item, #name);\
-            if (var) proc->name = var->valuedouble;              \
+#define FETCH_DOUBLE(var, name)                                           \
+        do { ret = json_object_object_get_ex(jvalue, #name, &var);        \
+            if (ret) proc->name = (double)json_object_get_double(var);    \
         } while(0)
-#define FETCH_INTEGER(var, name)                                 \
-        do { var = cJSON_GetObjectItemCaseSensitive(item, #name);\
-            if (var) proc->name = var->valueint;                 \
+#define FETCH_INTEGER(var, name)                                          \
+        do { ret = json_object_object_get_ex(jvalue, #name, &var);        \
+            if (ret) proc->name = (int)json_object_get_int(var);          \
         } while(0)
 
         FETCH_STRING(layer, layer_name);
@@ -986,10 +987,10 @@ int ff_parse_output_postproc(const void *json, ModelOutputPostproc *m_postproc)
         FETCH_INTEGER(tensor2text_precision, tensor2text_precision);
 
         // handle labels
-        labels = cJSON_GetObjectItemCaseSensitive(item, "labels");
-        if (labels) {
-            cJSON *label;
-            size_t labels_num = cJSON_GetArraySize(labels);
+        ret = json_object_object_get_ex(jvalue, "labels", &labels);
+        if (ret) {
+            json_object *label;
+            size_t labels_num = json_object_array_length(labels);
 
             if (labels_num > 0) {
                 AVBufferRef *ref    = NULL;
@@ -998,8 +999,9 @@ int ff_parse_output_postproc(const void *json, ModelOutputPostproc *m_postproc)
                 if (!larray)
                     return AVERROR(ENOMEM);
 
-                cJSON_ArrayForEach(label, labels) {
-                    char *l = av_strdup(label->valuestring);
+                for(int i = 0; i < labels_num; i++){
+                    label = json_object_array_get_idx(labels, i);
+                    char *l = av_strdup(json_object_get_string(label));
                     av_dynarray_add(&larray->label, &larray->num, l);
                 }
 
@@ -1007,14 +1009,13 @@ int ff_parse_output_postproc(const void *json, ModelOutputPostproc *m_postproc)
                         &infer_labels_buffer_free, NULL, 0);
 
                 proc->labels = ref;
-
-                if (ref)
+                 
+                if(ref)
                     infer_labels_dump(ref->data);
             }
         }
-
-        index++;
     }
+
 #undef FETCH_STRING
 #undef FETCH_DOUBLE
 #undef FETCH_INTEGER
@@ -1036,6 +1037,6 @@ void ff_release_model_proc(const void *json,
         }
     }
 
-    cJSON_Delete((cJSON *)json);
+    json_object_put((json_object *)json);
 }
 #endif
diff --git a/libavfilter/inference.h b/libavfilter/inference.h
index 1d7971e..9f70e38 100644
--- a/libavfilter/inference.h
+++ b/libavfilter/inference.h
@@ -251,7 +251,7 @@ int va_vpp_surface_release(VAAPIVpp *ctx);
 
 int ff_get_file_size(FILE *fp);
 
-#if CONFIG_LIBCJSON
+#if CONFIG_LIBJSON_C
 void *ff_read_model_proc(const char *path);
 
 void ff_load_default_model_proc(ModelInputPreproc *preproc, ModelOutputPostproc *postproc);
diff --git a/libavfilter/vf_inference_classify.c b/libavfilter/vf_inference_classify.c
index b36a7ca..f50db1e 100644
--- a/libavfilter/vf_inference_classify.c
+++ b/libavfilter/vf_inference_classify.c
@@ -82,6 +82,7 @@ static void infer_classify_metadata_buffer_free(void *opaque, uint8_t *data)
             av_buffer_unref(&c->tensor_buf);
             av_freep(&c);
         }
+        av_free(classes->classifications);
         av_freep(&classes);
     }
 
@@ -253,10 +254,14 @@ static int default_postprocess(AVFilterContext *ctx,
     classify->detect_id  = detect_id;
     classify->layer_name = info->layer_name[result_id];
     classify->model      = s->model_file;
+    classify->name       = (char *)"default";
 
     classify->tensor_buf = av_buffer_alloc(meta->total_bytes);
-    if (!classify->tensor_buf)
+    if (!classify->tensor_buf) {
+        av_free(classify);
         return AVERROR(ENOMEM);
+    }
+
     if (meta->total_bytes > 0)
         memcpy(classify->tensor_buf->data, meta->data, meta->total_bytes);
 
@@ -494,6 +499,11 @@ static int filter_frame(AVFilterLink *inlink, AVFrame *in)
             // care interested object class only
             if (preproc && preproc->object_class && bbox->label_buf) {
                 LabelsArray *array = (LabelsArray *)bbox->label_buf->data;
+                if (bbox->label_id >= array->num) {
+                    av_log(NULL, AV_LOG_ERROR, "The json file must match the input model\n");
+                    ret = AVERROR(ERANGE);
+                    goto fail;
+                }
                 if (0 != strcmp(preproc->object_class, array->label[bbox->label_id]))
                     continue;
             }
diff --git a/libavfilter/vf_inference_detect.c b/libavfilter/vf_inference_detect.c
index 8b772c3..8e03595 100644
--- a/libavfilter/vf_inference_detect.c
+++ b/libavfilter/vf_inference_detect.c
@@ -58,6 +58,7 @@ typedef struct InferenceDetectContext {
     int    batch_size;
     int    frame_number;
     int    every_nth_frame;
+    int    max_count;
     float  threshold;
 
     int    input_layout;
@@ -82,6 +83,7 @@ static void infer_detect_metadata_buffer_free(void *opaque, uint8_t *data)
                 av_buffer_unref(&p->label_buf);
             av_freep(&p);
         }
+        av_free(bboxes->bbox);
         av_freep(&bboxes);
     }
 
@@ -140,6 +142,9 @@ static int detect_postprocess(AVFilterContext *ctx, InferTensorMeta *meta, AVFra
             new_bbox->label_buf = av_buffer_ref(s->model_postproc.procs[0].labels);
 
         av_dynarray_add(&boxes->bbox, &boxes->num, new_bbox);
+
+        if (boxes->num >= s->max_count)
+            break;
     }
 
     // dump face detected meta
@@ -427,9 +432,10 @@ static const AVOption inference_detect_options[] = {
     { "model_proc",  "model preproc and postproc",      OFFSET(model_proc),      AV_OPT_TYPE_STRING, { .str = NULL},                   0, 0,  FLAGS },
     { "device",      "running on device type",          OFFSET(device_type),     AV_OPT_TYPE_FLAGS,  { .i64 = DNN_TARGET_DEVICE_CPU }, 0, 12, FLAGS },
     { "vpp_format",  "specify vpp output format",       OFFSET(vpp_format),      AV_OPT_TYPE_STRING, { .str = NULL},                   0, 0,  FLAGS },
-    { "interval",    "detect every Nth frame",          OFFSET(every_nth_frame), AV_OPT_TYPE_INT,    { .i64 = 1 },  1, 1024, FLAGS},
-    { "batch_size",  "batch size per infer",            OFFSET(batch_size),      AV_OPT_TYPE_INT,    { .i64 = 1 },  1, 1024, FLAGS},
-    { "threshold",   "threshod to filter output data",  OFFSET(threshold),       AV_OPT_TYPE_FLOAT,  { .dbl = 0.5}, 0, 1,    FLAGS},
+    { "interval",    "detect every Nth frame",          OFFSET(every_nth_frame), AV_OPT_TYPE_INT,    { .i64 = 1 },   1, 1024,    FLAGS},
+    { "batch_size",  "batch size per infer",            OFFSET(batch_size),      AV_OPT_TYPE_INT,    { .i64 = 1 },   1, 1024,    FLAGS},
+    { "max_count",   "max count of output result",      OFFSET(max_count),       AV_OPT_TYPE_INT,    { .i64 = 1000}, 1, INT_MAX, FLAGS},
+    { "threshold",   "threshod to filter output data",  OFFSET(threshold),       AV_OPT_TYPE_FLOAT,  { .dbl = 0.5},  0, 1,       FLAGS},
 
     { NULL }
 };
diff --git a/libavfilter/vf_inference_identify.c b/libavfilter/vf_inference_identify.c
index 5e676dd..6f9aaaa 100644
--- a/libavfilter/vf_inference_identify.c
+++ b/libavfilter/vf_inference_identify.c
@@ -34,7 +34,7 @@
 
 #include "inference.h"
 
-#include <cjson/cJSON.h>
+#include <json-c/json.h>
 
 #define OFFSET(x) offsetof(InferenceIdentifyContext, x)
 #define FLAGS (AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_FILTERING_PARAM)
@@ -103,11 +103,12 @@ static av_cold int identify_init(AVFilterContext *ctx)
     size_t i, index = 1;
     char *dup, *unknown;
     const char *dirname;
-    cJSON *entry, *item;
+    json_object *entry;
     LabelsArray *larray = NULL;
     AVBufferRef *ref    = NULL;
     InferenceIdentifyContext *s = ctx->priv;
     size_t vec_size_in_bytes = sizeof(float) * FACE_FEATURE_VECTOR_LEN;
+    int ret;
 
     av_assert0(s->gallery);
 
@@ -133,54 +134,60 @@ static av_cold int identify_init(AVFilterContext *ctx)
     unknown = av_strdup("Unknown_Person");
     av_dynarray_add(&larray->label, &larray->num, unknown);
 
-    cJSON_ArrayForEach(item, entry)
-    {
-        char *l = av_strdup(item->string);
-        cJSON *features, *feature;
+    json_object_object_foreach(entry, key, jvalue){
+        char *l = av_strdup(key);
+        json_object *features, *feature;
 
         av_dynarray_add(&larray->label, &larray->num, l);
 
-        features = cJSON_GetObjectItem(item, "features");
-
-        cJSON_ArrayForEach(feature, features)
-        {
-            FILE *vec_fp;
-            FeatureLabelPair *pair;
-            char path[4096];
-
-            memset(path, 0, sizeof(path));
-
-            if (!cJSON_IsString(feature) || !feature->valuestring)
-                continue;
-
-            strncpy(path, dirname, strlen(dirname));
-            strncat(path, "/", 1);
-            strncat(path, feature->valuestring, strlen(feature->valuestring));
-
-            vec_fp = fopen(path, "rb");
-            if (!vec_fp) {
-                av_log(ctx, AV_LOG_ERROR, "Could not open feature file:%s\n", path);
-                continue;
-            }
+        ret = json_object_object_get_ex(jvalue, "features", &features);
+        if (ret) {
+            size_t features_num = json_object_array_length(features);
+
+            for(int i = 0; i < features_num; i++){
+                FILE *vec_fp;
+                FeatureLabelPair *pair;
+                char path[4096];
+
+                memset(path, 0, sizeof(path));
+
+                feature = json_object_array_get_idx(features, i);
+                if (json_object_get_string(feature) == NULL)
+                    continue;
+
+                strncpy(path, dirname, strlen(dirname));
+                strncat(path, "/", 1);
+                strncat(path, json_object_get_string(feature), strlen(json_object_get_string(feature)));
+
+                vec_fp = fopen(path, "rb");
+                if (!vec_fp) {
+                    av_log(ctx, AV_LOG_ERROR, "Could not open feature file:%s\n", path);
+                    continue;
+                }
+
+                pair = av_mallocz(sizeof(FeatureLabelPair));
+                if (!pair){
+                    fclose(vec_fp);
+                    return AVERROR(ENOMEM);
+                }
+
+                pair->feature = av_malloc(vec_size_in_bytes);
+                if (!pair->feature){
+                    fclose(vec_fp);
+                    return AVERROR(ENOMEM);
+                }
+
+                if (fread(pair->feature, vec_size_in_bytes, 1, vec_fp) != 1) {
+                    av_log(ctx, AV_LOG_ERROR, "Feature vector size mismatch:%s\n", path);
+                    fclose(vec_fp);
+                    return AVERROR(EINVAL);
+                }
 
-            pair = av_mallocz(sizeof(FeatureLabelPair));
-            if (!pair)
-                return AVERROR(ENOMEM);
-
-            pair->feature = av_malloc(vec_size_in_bytes);
-            if (!pair->feature)
-                return AVERROR(ENOMEM);
-
-            if (fread(pair->feature, vec_size_in_bytes, 1, vec_fp) != 1) {
-                av_log(ctx, AV_LOG_ERROR, "Feature vector size mismatch:%s\n", path);
                 fclose(vec_fp);
-                return AVERROR(EINVAL);
-            }
 
-            fclose(vec_fp);
-
-            pair->label_id = index;
-            av_dynarray_add(&s->features, &s->features_num, pair);
+                pair->label_id = index;
+                av_dynarray_add(&s->features, &s->features_num, pair);
+            }
         }
         index++;
     }
@@ -208,9 +215,12 @@ static av_cold void identify_uninit(AVFilterContext *ctx)
 
     av_buffer_unref(&s->labels);
 
-    for (i = 0; i < s->features_num; i++) {
-        av_freep(&s->features[i]->feature);
-        av_freep(&s->features[i]);
+    if (s->features) {
+        for (i = 0; i < s->features_num; i++) {
+            av_freep(&s->features[i]->feature);
+            av_freep(&s->features[i]);
+        }
+        av_free(s->features);
     }
     if (s->norm_std)
         av_free(s->norm_std);
-- 
2.7.4

